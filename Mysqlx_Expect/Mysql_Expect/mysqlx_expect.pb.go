// Code generated by protoc-gen-go.
// source: mysqlx_expect.proto
// DO NOT EDIT!

/*
Package Mysqlx_Expect is a generated protocol buffer package.

Expect operations

It is generated from these files:
	mysqlx_expect.proto

It has these top-level messages:
	Open
	Close
*/
package Mysqlx_Expect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Open_CtxOperation int32

const (
	// copy the operations from the parent Expect-block
	Open_EXPECT_CTX_COPY_PREV Open_CtxOperation = 0
	// start with a empty set of operations
	Open_EXPECT_CTX_EMPTY Open_CtxOperation = 1
)

var Open_CtxOperation_name = map[int32]string{
	0: "EXPECT_CTX_COPY_PREV",
	1: "EXPECT_CTX_EMPTY",
}
var Open_CtxOperation_value = map[string]int32{
	"EXPECT_CTX_COPY_PREV": 0,
	"EXPECT_CTX_EMPTY":     1,
}

func (x Open_CtxOperation) Enum() *Open_CtxOperation {
	p := new(Open_CtxOperation)
	*p = x
	return p
}
func (x Open_CtxOperation) String() string {
	return proto.EnumName(Open_CtxOperation_name, int32(x))
}
func (x *Open_CtxOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_CtxOperation_value, data, "Open_CtxOperation")
	if err != nil {
		return err
	}
	*x = Open_CtxOperation(value)
	return nil
}
func (Open_CtxOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Open_Condition_ConditionOperation int32

const (
	// set the condition
	//
	// set, if not set
	// overwrite, if set
	Open_Condition_EXPECT_OP_SET Open_Condition_ConditionOperation = 0
	// unset the condition
	Open_Condition_EXPECT_OP_UNSET Open_Condition_ConditionOperation = 1
)

var Open_Condition_ConditionOperation_name = map[int32]string{
	0: "EXPECT_OP_SET",
	1: "EXPECT_OP_UNSET",
}
var Open_Condition_ConditionOperation_value = map[string]int32{
	"EXPECT_OP_SET":   0,
	"EXPECT_OP_UNSET": 1,
}

func (x Open_Condition_ConditionOperation) Enum() *Open_Condition_ConditionOperation {
	p := new(Open_Condition_ConditionOperation)
	*p = x
	return p
}
func (x Open_Condition_ConditionOperation) String() string {
	return proto.EnumName(Open_Condition_ConditionOperation_name, int32(x))
}
func (x *Open_Condition_ConditionOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_Condition_ConditionOperation_value, data, "Open_Condition_ConditionOperation")
	if err != nil {
		return err
	}
	*x = Open_Condition_ConditionOperation(value)
	return nil
}
func (Open_Condition_ConditionOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

// open an Expect block and set/unset the conditions that have to be fulfilled
//
// if any of the conditions fail, all enclosed messages will fail with
// a Mysqlx.Error message.
//
// :returns: :protobuf:msg:`Mysqlx::Ok` on success, :protobuf:msg:`Mysqlx::Error` on error
//
type Open struct {
	Op               *Open_CtxOperation `protobuf:"varint,1,opt,name=op,enum=Mysqlx.Expect.Open_CtxOperation,def=0" json:"op,omitempty"`
	Cond             []*Open_Condition  `protobuf:"bytes,2,rep,name=cond" json:"cond,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Open) Reset()                    { *m = Open{} }
func (m *Open) String() string            { return proto.CompactTextString(m) }
func (*Open) ProtoMessage()               {}
func (*Open) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_Open_Op Open_CtxOperation = Open_EXPECT_CTX_COPY_PREV

func (m *Open) GetOp() Open_CtxOperation {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_Open_Op
}

func (m *Open) GetCond() []*Open_Condition {
	if m != nil {
		return m.Cond
	}
	return nil
}

type Open_Condition struct {
	ConditionKey     *uint32                            `protobuf:"varint,1,req,name=condition_key" json:"condition_key,omitempty"`
	ConditionValue   []byte                             `protobuf:"bytes,2,opt,name=condition_value" json:"condition_value,omitempty"`
	Op               *Open_Condition_ConditionOperation `protobuf:"varint,3,opt,name=op,enum=Mysqlx.Expect.Open_Condition_ConditionOperation,def=0" json:"op,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *Open_Condition) Reset()                    { *m = Open_Condition{} }
func (m *Open_Condition) String() string            { return proto.CompactTextString(m) }
func (*Open_Condition) ProtoMessage()               {}
func (*Open_Condition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

const Default_Open_Condition_Op Open_Condition_ConditionOperation = Open_Condition_EXPECT_OP_SET

func (m *Open_Condition) GetConditionKey() uint32 {
	if m != nil && m.ConditionKey != nil {
		return *m.ConditionKey
	}
	return 0
}

func (m *Open_Condition) GetConditionValue() []byte {
	if m != nil {
		return m.ConditionValue
	}
	return nil
}

func (m *Open_Condition) GetOp() Open_Condition_ConditionOperation {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_Open_Condition_Op
}

// close a Expect block
//
// closing a Expect block restores the state of the previous Expect block
// for the following messages
//
// :returns: :protobuf:msg:`Mysqlx::Ok` on success, :protobuf:msg:`Mysqlx::Error` on error
type Close struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Close) Reset()                    { *m = Close{} }
func (m *Close) String() string            { return proto.CompactTextString(m) }
func (*Close) ProtoMessage()               {}
func (*Close) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Open)(nil), "Mysqlx.Expect.Open")
	proto.RegisterType((*Open_Condition)(nil), "Mysqlx.Expect.Open.Condition")
	proto.RegisterType((*Close)(nil), "Mysqlx.Expect.Close")
	proto.RegisterEnum("Mysqlx.Expect.Open_CtxOperation", Open_CtxOperation_name, Open_CtxOperation_value)
	proto.RegisterEnum("Mysqlx.Expect.Open_Condition_ConditionOperation", Open_Condition_ConditionOperation_name, Open_Condition_ConditionOperation_value)
}

var fileDescriptor0 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xad, 0x2c, 0x2e,
	0xcc, 0xa9, 0x88, 0x4f, 0xad, 0x28, 0x48, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0xf5, 0x05, 0x0b, 0xea, 0xb9, 0x82, 0x05, 0x95, 0x1a, 0x98, 0xb9, 0x58, 0xfc, 0x0b, 0x52,
	0xf3, 0x84, 0x9c, 0xb8, 0x98, 0xf2, 0x0b, 0x24, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x14, 0xf4,
	0x50, 0x14, 0xe9, 0x81, 0x14, 0xe8, 0x39, 0x97, 0x54, 0x00, 0xe9, 0xa2, 0xc4, 0x92, 0xcc, 0xfc,
	0x3c, 0x2b, 0x11, 0xd7, 0x88, 0x00, 0x57, 0xe7, 0x90, 0x78, 0xe7, 0x90, 0x88, 0x78, 0x67, 0xff,
	0x80, 0xc8, 0xf8, 0x80, 0x20, 0xd7, 0x30, 0x21, 0x6d, 0x2e, 0x96, 0xe4, 0xfc, 0xbc, 0x14, 0x09,
	0x26, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x59, 0xac, 0xa6, 0x00, 0xe5, 0x33, 0x41, 0x46, 0x48, 0x1d,
	0x63, 0xe4, 0xe2, 0x84, 0xf3, 0x84, 0x44, 0xb9, 0x78, 0x93, 0x61, 0x9c, 0xf8, 0xec, 0xd4, 0x4a,
	0xa0, 0x4b, 0x98, 0x34, 0x78, 0x85, 0xc4, 0xb9, 0xf8, 0x11, 0xc2, 0x65, 0x89, 0x39, 0xa5, 0xa9,
	0x40, 0xc3, 0x19, 0x35, 0x78, 0x84, 0xbc, 0xc1, 0xce, 0x65, 0x06, 0x3b, 0xd7, 0x00, 0xaf, 0x45,
	0x08, 0x16, 0xc2, 0xf9, 0xbc, 0x50, 0xe7, 0xfb, 0x07, 0xc4, 0x07, 0xbb, 0x86, 0x28, 0xd9, 0x70,
	0x09, 0x61, 0x2a, 0x12, 0x12, 0xe4, 0x42, 0x55, 0x26, 0xc0, 0x20, 0x24, 0xcc, 0xc5, 0x8f, 0x10,
	0x0a, 0xf5, 0x03, 0x09, 0x32, 0x2a, 0xd9, 0x71, 0xf1, 0x20, 0x87, 0x8d, 0x90, 0x04, 0x17, 0xd6,
	0xd0, 0x01, 0x6a, 0x17, 0xe1, 0x12, 0x40, 0x92, 0x71, 0xf5, 0x0d, 0x08, 0x89, 0x04, 0xea, 0x67,
	0xe7, 0x62, 0x75, 0xce, 0xc9, 0x2f, 0x4e, 0x75, 0x92, 0xe3, 0x92, 0x49, 0xce, 0xcf, 0xd5, 0x03,
	0xc7, 0x9a, 0x5e, 0x72, 0x16, 0x84, 0x51, 0x01, 0x89, 0xb7, 0xa4, 0xd2, 0x34, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0xdf, 0xfe, 0xb9, 0xd0, 0x01, 0x00, 0x00,
}
